{"version":3,"sources":["components/PhotoAlbums.js","App.js","serviceWorker.js","index.js"],"names":["PhotoAlbums","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","userID","setState","selectedUserInfo","albumUrl","fetch","then","response","json","responseJson","userAlbums","console","log","state","catch","error","handleAlbumClick","albumId","index","photosUrl","albumPhotos","users","bind","assertThisInitialized","_this2","albumOptions","Option","Select","length","react_default","a","createElement","className","es_select","defaultValue","style","width","onChange","map","album","key","id","title","user","name","photo","href","url","src","alt","Component","App","components_PhotoAlbums","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c867a024.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Select } from \"antd\";\r\n\r\nclass PhotoAlbums extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      users: [],\r\n      selectedUserInfo: [],\r\n      userAlbums: [],\r\n      albumPhotos: []\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleAlbumClick = this.handleAlbumClick.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const url = \"https://jsonplaceholder.typicode.com/users\";\r\n    fetch(url)\r\n      .then(response => response.json())\r\n      .then(responseJson => {\r\n        this.setState({ users: responseJson });\r\n        console.log(\"Test - Retriving list of users on component did mount.\");\r\n        console.log(this.state.users);\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  handleChange = userID => {\r\n    this.setState({ selectedUserInfo: userID });\r\n    const albumUrl =\r\n      \"https://jsonplaceholder.typicode.com/albums?userId=\" + userID;\r\n\r\n    fetch(albumUrl)\r\n      .then(response => response.json())\r\n      .then(responseJson => {\r\n        this.setState({ userAlbums: responseJson });\r\n        console.log(\"Test - Retrive Albums for selected users.\");\r\n        console.log(\"Album URL\");\r\n        console.log(albumUrl);\r\n        console.log(\"Albums\");\r\n        console.log(this.state.userAlbums);\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  handleAlbumClick = (albumId, index) => {\r\n    console.log(\"Test - Displaying albumId # of album clicked.\");\r\n    console.log(albumId);\r\n    // this.setState({ userAlbums: [] });\r\n    const photosUrl =\r\n      \"https://jsonplaceholder.typicode.com/photos?albumId=\" + albumId;\r\n\r\n    console.log(photosUrl);\r\n\r\n    fetch(photosUrl)\r\n      .then(response => response.json())\r\n      .then(responseJson => {\r\n        this.setState({ albumPhotos: responseJson });\r\n        console.log(this.state.albumPhotos);\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  render() {\r\n    let { Option } = Select;\r\n    let albumOptions;\r\n    if (this.state.userAlbums.length > 0) {\r\n      albumOptions = (\r\n        <div className=\"User-albums-dropdown\">\r\n          <h2>Ok! Now Select Album You Want To See!</h2>\r\n          <Select\r\n            defaultValue=\"Select Album\"\r\n            style={{ width: 520 }}\r\n            onChange={this.handleAlbumClick}\r\n          >\r\n            {this.state.userAlbums.map(album => (\r\n              <Option key={album.id}>\r\n                {\"Album # - \" + album.id + \" \" + album.title}\r\n              </Option>\r\n            ))}\r\n          </Select>\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"User-selection\">\r\n          <Select\r\n            defaultValue=\"Select User\"\r\n            style={{ width: 220 }}\r\n            onChange={this.handleChange}\r\n          >\r\n            {this.state.users.map(user => (\r\n              <Option key={user.id}>{user.name}</Option>\r\n            ))}\r\n          </Select>\r\n        </div>\r\n        {albumOptions}\r\n        <div className=\"responsiveGrid\">\r\n          {this.state.albumPhotos.map(photo => (\r\n            <a href={photo.url}>\r\n              <figure>\r\n                <img src={photo.url} alt=\"\" />\r\n              </figure>\r\n            </a>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PhotoAlbums;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport PhotoAlbums from \"./components/PhotoAlbums\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Albums & Photos</h1>\n      <PhotoAlbums />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"antd/dist/antd.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}