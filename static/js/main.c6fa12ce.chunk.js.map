{"version":3,"sources":["components/UserOptions.js","App.js","serviceWorker.js","index.js"],"names":["UserOptions","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","userID","console","log","concat","setState","selectedUserInfo","albumUrl","fetch","then","response","json","responseJson","userAlbums","state","catch","error","handleAlbumClick","albumID","alert","users","bind","assertThisInitialized","_this2","Option","Select","react_default","a","createElement","className","es_select","defaultValue","style","width","onChange","map","user","key","id","name","list","grid","gutter","xs","sm","md","lg","xl","xxl","dataSource","renderItem","item","Item","card","title","Component","App","components_UserOptions","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iUAkGeA,cA9Fb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAuBRQ,aAAe,SAAAC,GACbC,QAAQC,IAAR,YAAAC,OAAwBH,IACxBR,EAAKY,SAAS,CAAEC,iBAAkBL,IAClC,IAAMM,EACJ,sDAAwDN,EAE1DO,MAAMD,GACHE,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACJnB,EAAKY,SAAS,CAAEQ,WAAYD,IAC5BV,QAAQC,IAAIV,EAAKqB,MAAMD,cAExBE,MAAM,SAAAC,GACLd,QAAQC,IAAIa,KAEhBd,QAAQC,IAAII,IAvCKd,EA0CnBwB,iBAAmB,SAAAC,GACjBC,MAAM,2BAA6BD,IAzCnCzB,EAAKqB,MAAQ,CACXM,MAAO,GACPd,iBAAkB,GAClBO,WAAY,IAEdpB,EAAKO,aAAeP,EAAKO,aAAaqB,KAAlB3B,OAAA4B,EAAA,EAAA5B,CAAAD,IACpBA,EAAKwB,iBAAmBxB,EAAKwB,iBAAiBI,KAAtB3B,OAAA4B,EAAA,EAAA5B,CAAAD,IARPA,mFAWC,IAAA8B,EAAA3B,KAElBY,MADY,8CAETC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACJW,EAAKlB,SAAS,CAAEe,MAAOR,IACvBV,QAAQC,IAAIoB,EAAKT,MAAMM,SAExBL,MAAM,SAAAC,GACLd,QAAQC,IAAIa,sCA0BT,IACDQ,EAAWC,IAAXD,OACN,OACEE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACEC,aAAa,cACbC,MAAO,CAAEC,MAAO,KAChBC,SAAUtC,KAAKI,cAEdJ,KAAKkB,MAAMM,MAAMe,IAAI,SAAAC,GAAI,OACxBV,EAAAC,EAAAC,cAACJ,EAAD,CAAQa,IAAKD,EAAKE,IAAKF,EAAKG,UAalCb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAACY,EAAA,EAAD,CACEC,KAAM,CACJC,OAAQ,GACRC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,IAAK,GAEPC,WAAYrD,KAAKkB,MAAMD,WACvBqC,WAAY,SAAAC,GAAI,OACdzB,EAAAC,EAAAC,cAACY,EAAA,EAAKY,KAAN,KACE1B,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CAAMC,MAAO,aAAeH,EAAKb,IAAKa,EAAKG,oBArFjCC,aCUXC,MATf,WACE,OACE9B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAC6B,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOtC,EAAAC,EAAAC,cAACqC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7D,KAAK,SAAA8D,GACjCA,EAAaC","file":"static/js/main.c6fa12ce.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Select, Card, List } from \"antd\";\r\n\r\nclass UserOptions extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      users: [],\r\n      selectedUserInfo: [],\r\n      userAlbums: []\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleAlbumClick = this.handleAlbumClick.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const url = \"https://jsonplaceholder.typicode.com/users\";\r\n    fetch(url)\r\n      .then(response => response.json())\r\n      .then(responseJson => {\r\n        this.setState({ users: responseJson });\r\n        console.log(this.state.users);\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  handleChange = userID => {\r\n    console.log(`selected ${userID}`);\r\n    this.setState({ selectedUserInfo: userID });\r\n    const albumUrl =\r\n      \"https://jsonplaceholder.typicode.com/albums?userId=\" + userID;\r\n\r\n    fetch(albumUrl)\r\n      .then(response => response.json())\r\n      .then(responseJson => {\r\n        this.setState({ userAlbums: responseJson });\r\n        console.log(this.state.userAlbums);\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n    console.log(albumUrl);\r\n  };\r\n\r\n  handleAlbumClick = albumID => {\r\n    alert(\"You clicked on album no:\" + albumID);\r\n  };\r\n\r\n  render() {\r\n    let { Option } = Select;\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"User-selection\">\r\n          <Select\r\n            defaultValue=\"Select User\"\r\n            style={{ width: 220 }}\r\n            onChange={this.handleChange}\r\n          >\r\n            {this.state.users.map(user => (\r\n              <Option key={user.id}>{user.name}</Option>\r\n            ))}\r\n          </Select>\r\n          {/* <div className=\"User-albums\">\r\n            <Card>\r\n              {this.state.userAlbums.map(album => (\r\n                <Card.Grid key={album.id} onClick={this.handleAlbumClick}>\r\n                  {album.title}\r\n                </Card.Grid>\r\n              ))}\r\n            </Card>\r\n          </div> */}\r\n        </div>\r\n        <div className=\"User-albums-list\">\r\n          <List\r\n            grid={{\r\n              gutter: 16,\r\n              xs: 1,\r\n              sm: 2,\r\n              md: 4,\r\n              lg: 4,\r\n              xl: 2,\r\n              xxl: 3\r\n            }}\r\n            dataSource={this.state.userAlbums}\r\n            renderItem={item => (\r\n              <List.Item>\r\n                <Card title={`Album # - ` + item.id}>{item.title}</Card>\r\n              </List.Item>\r\n            )}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UserOptions;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport UserOptions from \"./components/UserOptions\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Albums & Photos</h1>\n      <UserOptions />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"antd/dist/antd.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}